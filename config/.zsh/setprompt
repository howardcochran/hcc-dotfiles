# Setup hcochran's prompt.
# We expect that ~/.zsh/gencolors has already been sourced by this shell, so
# that all the color strings therein are already defined.

setopt PROMPT_SUBST

# Helper function for showing a SUDO flag in prompt when shell has cached sudo
# access (i.e. temporary password-less sudo)
_can_i_sudo() {
    sudo -n true 2>/dev/null
}

_prompt_has() {
    local flag="$1"  # Should be only one character
    [[ "$prompt_flags" =~ "$flag" ]]
}

# Default is for prompt to show everything:
# u: Show username@
# s: Shows SUDO in red if current shell has sudo access
# g: Show git info
# The following test equiv to [[ ! -v prompt_flags ]] but is compatible with
# zsh older than 5.3 (e.g. Ubuntu 16.04)
if (( ! ${+prompt_flags} )); then
    prompt_flags='usg'
fi

# Lagacy interface: Let user disable the SUDO flag in prompt by touching
# a flag file. Removes 's' from prompt_flags
[[ -e ~/.config/no_sudo_flag_in_prompt ]] && prompt_flags=${prompt_flags/s/}

# Options for the gitfast/git-prompt plugin from oh-my-zsh
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUPSTREAM="auto verbose"
GIT_PS1_DESCRIBE_STYLE="branch"
GIT_PS1_SHOWCOLORHINTS=1

function hccprompt {
    # Colors: Main one bright makes cmd boundaries easy to find in scrollback
    local maincolor="%F{yellow}"
    local dockercolor="%F{blue}"
    local ptagcolor="%F{cyan}"
    local hostcolor="%F{69}"       # A bright blue
    local bgjobscolor="%F{128}"    # purple
    local sudocolor="%F{red}"
    local usercolor=$hostcolor

    # Opening and Time of Day
    PS1="%B${maincolor}===[%T"

    # If in Docker container, print the container name
    if [[ -n $DOCKER_NAME ]] ; then
        PS1+=" ${dockercolor}$DOCKER_NAME"
    fi

    # Username
    PS1+=" "
    if _prompt_has 'u'; then
        [[ $(id -u) -eq 0 ]] && usercolor=$sudocolor
        PS1+="${usercolor}%n${maincolor}@"
    fi

    # Hostname, up to first dot
    PS1+="${hostcolor}%m${maincolor}"

    local infile
    for infile in /etc/prompt-tag ~/.config/prompt-tag; do
        if [[ -r ${infile} ]]; then
            PS1+=" ${ptagcolor}$(<${infile})"
        fi
    done

    # ptag variable. User can set this to "tag" this shell
    if [[ -n $ptag ]]; then
        PS1+=" ${ptagcolor}${ptag}"
    fi

    # Count of background jobs and "vim" flag.
    # If the only BG jobs are vim/nvim, don't show count.
    local jobcnt=${#jobtexts}
    # Filter jobs to those that start with "vim" or contain " vim" (or nvim)
    local -a vims=(
        ${(@M)${(v)jobtexts[@]}#* vim}
        ${(@M)${(v)jobtexts[@]}#* nvim}
        ${(@M)${(v)jobtexts[@]}#vim}
        ${(@M)${(v)jobtexts[@]}#nvim}
        )
    if (( jobcnt - ${#vims} > 0 )); then
        # There are some non-vim background jobs. Show total count of BG jobs
        PS1+=" ${bgjobscolor}J:${#jobtexts}"
    fi
    # Show flag if at least one of the background jobs is vim
    if (( ${#vims} > 0 )); then
        PS1+=" ${bgjobscolor}vim"
    fi


    # Show a flag if this shell has cached Sudo permission
    if _prompt_has 's' && _can_i_sudo; then
        PS1+=" ${sudocolor}SUDO"
    fi

    # Close the bracketed section
    PS1+="${maincolor}]"

    # Exit status if command exited with Error.
    PS1+="%0(?,, %K{red}%F{white} Exit %? %f%k${maincolor})"

    # Git info, using the gitfast/git-prompt plugin from oh-my-zsh. In
    # colorizing, it uses %f to "return to the default color (white)".  But the
    # "default color" of my prompt is not white, so do a replacement. I could
    # probably change the shell's default color instead, but this would make
    # command text be that color, which is not what I want.
    if _prompt_has 'g'; then
        local git_info="$(__git_ps1)"
        PS1+="${git_info//\%f/${maincolor}}"
    fi

    # Current directory and newline
    PS1+="${maincolor} %~/
==>%f%b "

}
autoload -Uz add-zsh-hook
add-zsh-hook precmd hccprompt

# Show Elapsed wall-clock time for any command that takes longer
# than 1 second. This is like $REPORTTIME except that the threshold is
# real time rather than user+system CPU time.
__real_seconds() {
    echo $(( $(date '+%s + %N') / 1000000000.0 ))
}

__record_start_time() {
    # Used in elapsed time calculation in the prompt
    # However, don't do it if the command to be run is fg, because it makes
    # little sense to report the time of just one "fg" session in a
    # longer running command.
    if ! [[ $2 == fg || $2 == fg\ * ]]; then
        _start=$(__real_seconds)
    else
        unset _start
    fi
}
add-zsh-hook preexec __record_start_time

__show_elapsed() {
    # Show how long the previous command took if more than 1 second
    if (($+_start)); then
        local t=$(( $(__real_seconds)-_start ))
        unset _start
        if (($t > 1.0)); then
            echo >&2 "${hcyan}Elapsed:" \
                ${${${$(printf "%d:%02d:%05.2f" $((t / 3600)) $((t / 60 % 60)) $((t % 60)))#0:}#00:}#0}"${norm}"
        fi
    fi
}
add-zsh-hook precmd __show_elapsed


# Emit a terminal bell if last command exited with non-zero status. This makes
# the tmux window label change to "alert" color. Used to do this in the prompt
# but it would re-asert alert status every time the prompt was redrawn, causing
# lots of false alerts. Doing it in precmd means it will happen only once.
__bell_on_error() {
    [[ $? != 0 ]] && echo -n "\a"
}
add-zsh-hook precmd __bell_on_error

alias sp='source ~/.zsh/setprompt'
